{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "authors-haven",
    "description": "Authors-haven is an online publishing platform ",
    "contact": {}
  },
  "schemes": ["https", "http"],
  "host": "",
  "basePath": "/api/v1",
  "securityDefinitions": {
    "x-access": {
      "description": "Standard Authorization header using the bearer scheme. Example: \"bearer {token}\"",
      "type": "apiKey",
      "name": "x-access-token",
      "in": "header"
    },
    "Bearer": {
      "description": "Sends the bearer token in the header in the format \"Bearer {token}\"",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "consumes": ["application/json"],
  "tag": [
    {
      "name": "Auth",
      "description": "Endpoints for Authentication"
    },
    {
      "name": "Articles",
      "description": "Endpoints for Articles"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "description": "User Sign Up",
        "summary": "This endpoint registers users into the app",
        "tags": ["Auth"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user  basic information",
            "schema": {
              "$ref": "#/requestBody/signup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid input field"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "description": "A user can sign in",
        "summary": "This endpoint logs users into the app",
        "tags": ["Auth"],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the signin endpoint",
            "schema": {
              "$ref": "#/requestBody/signin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/verification":{
      "get": {
        "description": "verify email token",
        "summary": "This endpoint verify users in the app",
        "tags": ["Auth"],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the verification endpoint",
            "schema": {
              "$ref": "#/requestBody/verification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict error"
          }
        }
      }
    },
    "/auth/forgotPassword":{
      "post": {
        "description": "retrive user password",
        "summary": "This endpoint retrives users in the app",
        "tags": ["Auth"],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the verification endpoint",
            "schema": {
              "$ref": "#/requestBody/forgotPassword"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "bad request"
          }
        }
      }
    },
    "/auth/resetPassword":{
      "post": {
        "description": "Enables a user to request a password reset",
        "summary": "This endpoint resets password in the app",
        "tags": ["Auth"],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the verification endpoint",
            "schema": {
              "$ref": "#/requestBody/resetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "bad request"
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "description": "A user can sign in/register with a Google account",
        "summary": "This endpoint receives GET requests to sign in or register a user using a Google account",
        "tags": [
          "Auth"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "responses": {
          "201": {
            "description": "A new user created"
          },
          "200": {
            "description": "An existing user retrieved"
          },
          "401": {
            "description": "Signin error"
          }
        }
      }
    },
    "/articles":{
      "post": {
        "description": "A user can create an article",
        "summary": "This endpoint receives POST requests to create an article",
        "tags": [
          "Articles"
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the createArticle endpoint",
            "schema": {
              "$ref": "#/requestBody/articles"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A new article was created"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
     "/articles/:get_article_id":{
      "get": {
        "description": "A user can create an article",
        "summary": "This endpoint receives GET requests to retrive an article",
        "tags": [
          "Articles"
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the createArticle endpoint",
            "schema": {
              "$ref": "#/requestBody/articles/get_article_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/articles/:get_all_articles":{
      "get": {
        "description": "A user can create an article",
        "summary": "This endpoint receives GET requests to retrive all articles",
        "tags": [
          "Articles"
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the createArticle endpoint",
            "schema": {
              "$ref": "#/requestBody/articles/get_all_articles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/articles/:update_articles":{
      "patch": {
        "description": "A user can create an article",
        "summary": "This endpoint receives PATCH requests to update an article",
        "tags": [
          "Articles"
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the createArticle endpoint",
            "schema": {
              "$ref": "#/requestBody/articles/update_articles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/articles/:delete_article":{
      "delete": {
        "description": "A user can delete an article",
        "summary": "This endpoint receives DELETE requests to delete an article",
        "tags": [
          "Articles"
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request body for the createArticle endpoint",
            "schema": {
              "$ref": "#/requestBody/articles/delete_article"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    }
  },
  "requestBody": {
    "signup": {
      "title": "Signup Request",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name of the user",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of the user",
          "type": "string"
        },
        "email": {
          "description": "email of the user",
          "type": "string"
        },
        "password": {
          "description": "The Password of the user",
          "type": "string"
        }
      },
      "example": {
        "firstName": "John",
        "lastName": "Doe",
        "email": "john@gmail.com",
        "password": "secretlock"
      }
    },
    "signin": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "description": "User email",
          "type": "string"
        },
        "password": {
          "description": "User password",
          "type": "string"
        }
      },
      "example": {
        "email": "user@example.com",
        "password": "keeplearning"
      }
    },
    "verification": {
      "type": "object",
      "required": ["token", "email"],
      "properties": {
        "token": {
          "description": "User token",
          "type": "string"
        },
        "email": {
          "description": "User email",
          "type": "string"
        }
      },
      "example": {
        "token":"qgw6etr58gh598gh",
        "email": "user@example.com"
      }
    },
    "forgotPassword": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "description": "User email",
          "type": "string"
        }
      },
      "example": {
        "email": "user@example.com"
      }
    },
    "resetPassword": {
      "type": "object",
      "required": ["token", "email"],
      "properties": {
        "token": {
          "description": "User token",
          "type": "string"
        },
        "email": {
          "description": "User email",
          "type": "string"
        }
      },
      "example": {
        "token":"qgw6etr58gh598gh",
        "email": "user@example.com"
      }
    },
    "createArticles": {
      "type": "object",
      "required": ["title", "body", "type"],
      "properties": {
        "title": {
          "description": "Article title",
          "type": "string"
        },
        "body": {
          "description": "Article body",
          "type": "string"
        },
        "userId": {
          "description": "User id",
          "type": "uuid"
        },
        "type": {
          "description": "Article type",
          "type": "enum"
        },
        "avatar": {
          "description": "Article avatar",
          "type": "string"
        }
      },
      "example": {
        "title":"dxfcgvhbjn",
        "body": "xdcfgvhbjnhgfdcvhbjncfgvhb",
        "userId": "10d393fd-95d5-4af8-a242-6d121e1666ce",
        "type": "published",
        "avatar": "https://res.cloudinary.com/dhixv0jh9/image/upload/v1590399940/apps.24119.13561428843663101.db53229a-3063-4dd3-b18e-61ad6b3661d1_otde0c.png"
       }
    },
    "getSingleArticle": {
      "type": "object",
      "required": ["title", "body", "type"],
      "properties": {
        "title": {
          "description": "Article title",
          "type": "string"
        },
        "body": {
          "description": "Article body",
          "type": "string"
        },
        "userId": {
          "description": "User id",
          "type": "uuid"
        },
        "type": {
          "description": "Article type",
          "type": "enum"
        },
        "avatar": {
          "description": "Article avatar",
          "type": "string"
        }
      },
      "example": {
        "title":"dxfcgvhbjn",
        "body": "xdcfgvhbjnhgfdcvhbjncfgvhb",
        "userId": "10d393fd-95d5-4af8-a242-6d121e1666ce",
        "type": "published",
        "avatar": "https://res.cloudinary.com/dhixv0jh9/image/upload/v1590399940/apps.24119.13561428843663101.db53229a-3063-4dd3-b18e-61ad6b3661d1_otde0c.png"
       }
    },
    "getAllArticle": {
      "type": "array",
      "required": ["title", "body", "type"],
      "properties": {
        "title": {
          "description": "Article title",
          "type": "string"
        },
        "body": {
          "description": "Article body",
          "type": "string"
        },
        "userId": {
          "description": "User id",
          "type": "uuid"
        },
        "type": {
          "description": "Article type",
          "type": "enum"
        },
        "avatar": {
          "description": "Article avatar",
          "type": "string"
        }
      },
      "example": {
        "title":"dxfcgvhbjn",
        "body": "xdcfgvhbjnhgfdcvhbjncfgvhb",
        "userId": "10d393fd-95d5-4af8-a242-6d121e1666ce",
        "type": "published",
        "avatar": "https://res.cloudinary.com/dhixv0jh9/image/upload/v1590399940/apps.24119.13561428843663101.db53229a-3063-4dd3-b18e-61ad6b3661d1_otde0c.png"
       }
    },
    "updateArticle": {
      "type": "object",
      "required": ["title", "body", "type"],
      "properties": {
        "title": {
          "description": "Article title",
          "type": "string"
        },
        "body": {
          "description": "Article body",
          "type": "string"
        },
        "userId": {
          "description": "User id",
          "type": "uuid"
        },
        "type": {
          "description": "Article type",
          "type": "enum"
        },
        "avatar": {
          "description": "Article avatar",
          "type": "string"
        }
      },
      "example": {
        "title":"dxfcgvhbjn",
        "body": "xdcfgvhbjnhgfdcvhbjncfgvhb",
        "userId": "10d393fd-95d5-4af8-a242-6d121e1666ce",
        "type": "published",
        "avatar": "https://res.cloudinary.com/dhixv0jh9/image/upload/v1590399940/apps.24119.13561428843663101.db53229a-3063-4dd3-b18e-61ad6b3661d1_otde0c.png"
       }
    },
    "deleteArticle": {
      "type": "object",
      "properties": {
        "article_id": {
          "description": "id of the article to be deleted",
          "type": "uuid"
        }
      },
      "example": {
        "status": "success",
        "data": {
          "message": "article deleted successfully"
        }
      }
    }
  }
}

